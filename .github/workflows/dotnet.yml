name: Dotnet

on:
  workflow_dispatch:
    inputs:
      last_passed:
        description: ' Check to make last passed run'
        default: false
        required: true
        type: boolean
  workflow_call:
    inputs:
      last_passed:
        description: 'choose which version of the frameworks should be used (latest | last passed)'
        default: false
        required: true
        type: boolean
    secrets:
      APPLITOOLS_API_KEY:
        required: true
      SAUCE_USERNAME:
        required: true
      SAUCE_ACCESS_KEY:
        required: true

permissions:
  contents: read

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      uuid: ${{ steps.uuid.outputs.uuid }}
      matrix: ${{ steps.matrix.outputs.matrix}}
    steps:
      - name: generate uuid
        id: uuid
        run: |
          echo "uuid=$(uuidgen)" >> $GITHUB_OUTPUT
      - uses: actions/checkout@v3
      - name: generate matrix
        id: matrix
        uses: ./.github/actions/setup
        with:
          work_dir: 'sdks/dotnet'
          last_passed: ${{inputs.last_passed}}
  test:
    needs: setup
    strategy:
      fail-fast: false
      matrix:  ${{ fromJson(needs.setup.outputs.matrix) }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    env:
      APPLITOOLS_DONT_CLOSE_BATCHES: true
      APPLITOOLS_API_KEY: ${{ secrets.APPLITOOLS_API_KEY }}
      APPLITOOLS_BATCH_ID: ${{needs.setup.outputs.uuid}}
      SAUCE_USERNAME: ${{secrets.SAUCE_USERNAME}}
      SAUCE_ACCESS_KEY: ${{secrets.SAUCE_ACCESS_KEY}}
    defaults:
      run:
        working-directory: ${{matrix.work_dir}}
        shell: bash
    name: ${{ matrix.job_name }}
    steps:
      - uses: actions/checkout@v3
      - name: Setup dotnet
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: ${{ matrix.dotnet-version }}
      - name: Start Selenium Server
        if: ${{matrix.use_selenium }}
        id: selenium
        uses: ./.github/actions/start_selenium
      - name: Log extra info
        id: logging
        run: |
          chromedriver --version
          echo "chromedriver_version=$(chromedriver --version)" >> $GITHUB_OUTPUT
          if [ "$RUNNER_OS" == "Linux" ]; then
               google-chrome --version
               echo "chrome_version=$(google-chrome --version)" >> $GITHUB_OUTPUT
          elif [ "$RUNNER_OS" == "Windows" ]; then
               powershell.exe -command "(Get-Item 'C:\Program Files\Google\Chrome\Application\chrome.exe').VersionInfo.ProductVersion"
               echo "chrome_version=$(powershell.exe -command "(Get-Item 'C:\Program Files\Google\Chrome\Application\chrome.exe').VersionInfo.ProductVersion")" >> $GITHUB_OUTPUT
          elif [ "$RUNNER_OS" == "macOS" ]; then
               /Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome --version 
               echo "chrome_version=$(/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome --version)" >> $GITHUB_OUTPUT
          else
               echo "$RUNNER_OS not supported"
               exit 1
          fi
      - name: Logging version generation
        uses: ./.github/actions/log_data_json
        with:
          os: ${{runner.os}}
          title: ${{ format('Dotnet selenium sdk [{0}] [dotnet version {1}]', runner.os, matrix.dotnet-version) }}
          selenium:  ${{ steps.selenium.outputs.version }}
          matrix_os: ${{matrix.os}}
          work_dir: ${{matrix.work_dir}}
          chrome_version: ${{ steps.logging.outputs.chrome_version }}
          chromedriver_version: ${{ steps.logging.outputs.chromedriver_version }}
      - name: Run tests
        run: ${{matrix.test_command}}